1. Employees Table
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    name VARCHAR(50),
    department_id INT,
    salary INT
);

INSERT INTO Employees (emp_id, name, department_id, salary) VALUES
(1, 'Alice', 101, 60000),
(2, 'Bob', 102, 55000),
(3, 'Charlie', 101, 70000),
(4, 'David', 103, 48000),
(5, 'Eve', NULL, 75000),
(6, 'Frank', 104, 52000),
(7, 'Grace', 102, 58000),
(8, 'Hannah', NULL, 62000);

üß± 2. Departments Table
CREATE TABLE Departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50),
    location VARCHAR(50)
);

INSERT INTO Departments (department_id, department_name, location) VALUES
(101, 'HR', 'New York'),
(102, 'IT', 'San Francisco'),
(103, 'Finance', 'Chicago'),
(104, 'Sales', 'Boston'),
(105, 'Marketing', 'Los Angeles');

üîç 20 Hands-on SQL JOIN Questions

üîπ INNER JOIN
List all employees along with their department names.
 select emp.name,dep.department_name from employees emp inner join departments dep on emp.department_id=dep.department_id;
+---------+-----------------+
| name    | department_name |
+---------+-----------------+
| Alice   | HR              |
| Bob     | IT              |
| Charlie | HR              |
| David   | Finance         |
| Frank   | Sales           |
| Grace   | IT              |
+---------+-----------------+

Show the names of employees who work in the IT department.
select emp.name from employees emp inner join departments dep on emp.department_id=dep.department_id where dep.department_name='IT';
+-------+
| name  |
+-------+
| Bob   |
| Grace |
+-------+

Get the names and locations of departments where at least one employee works.
 select distinct d.department_name, d.location from employees e inner join departments d on e.department_id = d.department_id;
+-----------------+---------------+
| department_name | location      |
+-----------------+---------------+
| HR              | New York      |
| IT              | San Francisco |
| Finance         | Chicago       |
| Sales           | Boston        |
+-----------------+---------------+

Find employees who work in the same location as the 'HR' department.
 select e.name from employees e inner join departments d on e.department_id = d.department_id where d.location = ( select location from departments where department_name = 'hr' );
+---------+
| name    |
+---------+
| Alice   |
| Charlie |
+---------+

List department names and employee count (only departments with employees).
 select d.department_name, count(e.emp_id) as employee_count  from departments d  inner join employees e on e.department_id = d.department_id group by d.department_name;
+-----------------+----------------+
| department_name | employee_count |
+-----------------+----------------+
| HR              |              2 |
| IT              |              2 |
| Finance         |              1 |
| Sales           |              1 |
+-----------------+----------------+


üîπ LEFT JOIN
List all employees and their departments (even if they don‚Äôt belong to any department).
select employees.name,departments.department_name from employees left join departments on employees.department_id = departments.department_id;
+---------+-----------------+
| name    | department_name |
+---------+-----------------+
| Alice   | HR              |
| Bob     | IT              |
| Charlie | HR              |
| David   | Finance         |
| Eve     | NULL            |
| Frank   | Sales           |
| Grace   | IT              |
| Hannah  | NULL            |
+---------+-----------------+

Find employees who are not assigned to any department.
select employees.name from employees left join departments on departments.department_id = employees.department_id where departments.department_id is null;
+--------+
| name   |
+--------+
| Eve    |
| Hannah |
+--------+

List all departments and the names of employees working in them (include departments without employees).
select departments.department_name,employees.name from departments left join employees on employees.department_id = departments.department_id;
+-----------------+---------+
| department_name | name    |
+-----------------+---------+
| HR              | Charlie |
| HR              | Alice   |
| IT              | Grace   |
| IT              | Bob     |
| Finance         | David   |
| Sales           | Frank   |
| Marketing       | NULL    |
+-----------------+---------+

Show employee names and department names, replacing NULLs with 'Unassigned'.
select departments.department_name,employees.name from departments left join employees on employees.department_id = departments.department_id;
+-----------------+---------+
| department_name | name    |
+-----------------+---------+
| HR              | Charlie |
| HR              | Alice   |
| IT              | Grace   |
| IT              | Bob     |
| Finance         | David   |
| Sales           | Frank   |
| Marketing       | NULL    |
+-----------------+---------+

Find departments where no employees are assigned.
select departments.department_name from departments left join employees on departments.department_id = employees.department_id where employees.emp_id is null;
+-----------------+
| department_name |
+-----------------+
| Marketing       |
+-----------------+


üîπ RIGHT JOIN (use LEFT JOIN with reversed tables if using SQLite/MySQL)
Show all departments and the employees working in them (even if no employees).
(Use RIGHT JOIN or flip the LEFT JOIN if not supported)
 select d.department_name, e.name from departments d left join employees e on e.department_id = d.department_id;
+-----------------+---------+
| department_name | name    |
+-----------------+---------+
| HR              | Charlie |
| HR              | Alice   |
| IT              | Grace   |
| IT              | Bob     |
| Finance         | David   |
| Sales           | Frank   |
| Marketing       | NULL    |
+-----------------+---------+

List all employees and their department locations.
 select e.name, d.location from employees e left join departments d on e.department_id = d.department_id;
+---------+---------------+
| name    | location      |
+---------+---------------+
| Alice   | New York      |
| Bob     | San Francisco |
| Charlie | New York      |
| David   | Chicago       |
| Eve     | NULL          |
| Frank   | Boston        |
| Grace   | San Francisco |
| Hannah  | NULL          |
+---------+---------------+



üîπ FULL OUTER JOIN (Emulated in MySQL using UNION of LEFT and RIGHT JOIN)
List all employees and departments, even if they don't match.
(Helpful to find both unassigned employees and empty departments)
 select e.name, d.department_name from employees e left join departments d on e.department_id = d.department_id union select e.name, d.department_name from employees e right join departments d on e.department_id = d.department_id;
+---------+-----------------+
| name    | department_name |
+---------+-----------------+
| Alice   | HR              |
| Bob     | IT              |
| Charlie | HR              |
| David   | Finance         |
| Eve     | NULL            |
| Frank   | Sales           |
| Grace   | IT              |
| Hannah  | NULL            |
| NULL    | Marketing       |
+---------+-----------------+

Show which employees or departments are missing a match.
 select e.name, d.department_name from employees e left join departments d on e.department_id = d.department_id where d.department_id is null union select e.name, d.department_name from employees e right join departments d on e.department_id = d.department_id where e.emp_id is null;
+--------+-----------------+
| name   | department_name |
+--------+-----------------+
| Eve    | NULL            |
| Hannah | NULL            |
| NULL   | Marketing       |
+--------+-----------------+


üîπ SELF JOIN
Find all pairs of employees who work in the same department.
List employees along with their colleagues in the same department (exclude self).
Find all employee pairs where one earns more than the other.
List each employee with the name of the highest-paid person in their department.

üîπ CROSS JOIN
List all possible employee-department combinations.
Count how many total combinations of employees and departments exist.
